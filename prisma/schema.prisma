generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgres://postgres:admin@localhost:5432/sadm2"
}

model users {
  user_id             Int                @id @default(autoincrement())
  username            String             @unique
  display_name        String?
  email               String
  password_hash       String
  role_id             Int?
  financial_entity_id Int
  financial_entities  financial_entities @relation(fields: [financial_entity_id], references: [entity_id])
  roles               roles?             @relation(fields: [role_id], references: [role_id])
  entry_seats         entry_seats[]
}

model account_types {
  account_type_id Int        @id @default(autoincrement())
  name            String
  accounts        accounts[]
}

model accounts {
  account_id        Int                @id @default(autoincrement())
  name              String
  abstract_account  Boolean
  account_type_id   Int?
  account_balance   Float?
  parent_account_id Int?
  enabled           Boolean
  account_types     account_types?     @relation(fields: [account_type_id], references: [account_type_id])
  accounts          accounts?          @relation("accountsToaccounts_parent_account_id", fields: [parent_account_id], references: [account_id])
  other_accounts    accounts[]         @relation("accountsToaccounts_parent_account_id")
  entry_seat_lines  entry_seat_lines[]
}

model actions {
  action_id     Int             @id @default(autoincrement())
  name          String          @unique
  roles_actions roles_actions[]
}

model roles {
  role_id       Int             @id @default(autoincrement())
  name          String          @unique
  roles_actions roles_actions[]
  users         users[]
}

model roles_actions {
  id        Int      @id @default(autoincrement())
  role_id   Int?
  action_id Int?
  actions   actions? @relation(fields: [action_id], references: [action_id])
  roles     roles?   @relation(fields: [role_id], references: [role_id])
}

model entry_seat_lines {
  entry_seat_line_id Int         @id @default(autoincrement())
  position           Int
  account_id         Int
  entry_seat_id      Int
  assets             Float?
  debit              Float?
  accounts           accounts    @relation(fields: [account_id], references: [account_id])
  entry_seats        entry_seats @relation(fields: [entry_seat_id], references: [entry_seat_id])

  @@unique([entry_seat_id, position], name: "unique_position")
}

model entry_seats {
  entry_seat_id       Int                @id @default(autoincrement())
  creation_date       DateTime
  description         String
  operation_type      String
  financial_period_id Int
  created_by          Int?
  users               users?             @relation(fields: [created_by], references: [user_id])
  financial_period    financial_period   @relation(fields: [financial_period_id], references: [financial_period_id])
  entry_seat_lines    entry_seat_lines[]
}

model entity_liable {
  entity_liable_id   Int                @id @default(autoincrement())
  entity_id          Int
  first_name         String
  last_name          String
  email_address      String
  financial_entities financial_entities @relation(fields: [entity_id], references: [entity_id])
}

model financial_entities {
  entity_id        Int                @id @default(autoincrement())
  identifier       String
  address          String
  phone_number     String
  legal_name       String
  display_name     String?
  email_address    String
  entity_liable    entity_liable[]
  financial_period financial_period[]
  users            users[]
}

model financial_period {
  financial_period_id Int                @id @default(autoincrement())
  financial_entity_id Int
  period_name         String
  period_start_date   DateTime
  period_end_date     DateTime
  financial_entities  financial_entities @relation(fields: [financial_entity_id], references: [entity_id])
  entry_seats         entry_seats[]
}

model department {
  department_id Int    @id @default(autoincrement())
  name          String
  job           job[]
}

model employee {
  employee_id                         Int          @id @default(autoincrement())
  identity_number                     String
  email_work                          String
  email_personal                      String
  address                             String
  job_category                        Int
  start_date                          DateTime
  job_category_employeeTojob_category job_category @relation(fields: [job_category], references: [job_category_id])
}

model job {
  job_id        Int            @id @default(autoincrement())
  name          String
  base_salary   Float
  department_id Int
  department    department     @relation(fields: [department_id], references: [department_id])
  job_category  job_category[]
}

model job_category {
  job_category_id  Int        @id @default(autoincrement())
  name             String
  percentage_raise Float
  fixed_raise      Float
  job_id           Int
  job              job        @relation(fields: [job_id], references: [job_id])
  employee         employee[]
}

model concepto {
  concepto_id    Int              @id @default(autoincrement())
  codigo         Int              @unique
  nombre         String           @unique
  unidad         Int
  columna        Int
  tipoconcepto   Int
  grupo          String
  subgrupo       String
  seaplicaa      String[]
  cantidad       String
  valor          String?
  multiplicador  String           @default("1")
  divisor        String           @default("1")
  condicion      String?
  periodico      Boolean?         @default(true)
  concepto_tabla concepto_tabla[]
}

model concepto_tabla {
  concepto_tabla_id Int       @id @default(autoincrement())
  concepto_id       Int?
  minimo            Float
  maximo            Float
  fijo              Float
  porcentual        Float
  concepto          concepto? @relation(fields: [concepto_id], references: [concepto_id])
}
